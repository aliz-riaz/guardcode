"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactMultiEmail = void 0;
const React = __importStar(require("react"));
const isEmail_1 = require("./isEmail");
function ReactMultiEmail(props) {
    const { id, style, getLabel, className = '', noClass, placeholder, autoFocus, enable, onDisabled, validateEmail, onChange, onChangeInput, onFocus, onBlur, onKeyDown, onKeyUp, spinner, delimiter = '[ ,;]', initialInputValue = '', inputClassName } = props;
    const emailInputRef = React.useRef(null);
    const [focused, setFocused] = React.useState(false);
    const [emails, setEmails] = React.useState([]);
    const [inputValue, setInputValue] = React.useState(initialInputValue);
    const [spinning, setSpinning] = React.useState(false);
    const findEmailAddress = React.useCallback((value, isEnter) => __awaiter(this, void 0, void 0, function* () {
        const validEmails = [];
        let inputValue = '';
        const re = new RegExp(delimiter, 'g');
        const isEmail = validateEmail || isEmail_1.isEmail;
        const addEmails = (email) => {
            for (let i = 0, l = emails.length; i < l; i++) {
                if (emails[i] === email) {
                    return false;
                }
            }
            validEmails.push(email);
            return true;
        };
        if (value !== '') {
            if (re.test(value)) {
                const splitData = value.split(re).filter(n => {
                    return n !== '' && n !== undefined && n !== null;
                });
                const setArr = new Set(splitData);
                const arr = [...setArr];
                do {
                    const validateResult = isEmail('' + arr[0]);
                    if (typeof validateResult === 'boolean') {
                        if (validateResult) {
                            addEmails('' + arr.shift());
                        }
                        else {
                            if (arr.length === 1) {
                                inputValue = '' + arr.shift();
                            }
                            else {
                                arr.shift();
                            }
                        }
                    }
                    else {
                        // handle promise
                        setSpinning(true);
                        if ((yield (validateEmail === null || validateEmail === void 0 ? void 0 : validateEmail(value))) === true) {
                            addEmails('' + arr.shift());
                            setSpinning(false);
                        }
                        else {
                            if (arr.length === 1) {
                                inputValue = '' + arr.shift();
                            }
                            else {
                                arr.shift();
                            }
                        }
                    }
                } while (arr.length);
            }
            else {
                if (enable && !enable({ emailCnt: emails.length })) {
                    onDisabled === null || onDisabled === void 0 ? void 0 : onDisabled();
                    return;
                }
                if (isEnter) {
                    const validateResult = isEmail(value);
                    if (typeof validateResult === 'boolean') {
                        if (validateResult) {
                            addEmails(value);
                        }
                        else {
                            inputValue = value;
                        }
                    }
                    else {
                        // handle promise
                        setSpinning(true);
                        if ((yield (validateEmail === null || validateEmail === void 0 ? void 0 : validateEmail(value))) === true) {
                            addEmails(value);
                            setSpinning(false);
                        }
                        else {
                            inputValue = value;
                        }
                    }
                }
                else {
                    inputValue = value;
                }
            }
        }
        setEmails([...emails, ...validEmails]);
        setInputValue(inputValue);
        if (validEmails.length) {
            onChange === null || onChange === void 0 ? void 0 : onChange([...emails, ...validEmails]);
        }
        if (inputValue !== inputValue) {
            onChangeInput === null || onChangeInput === void 0 ? void 0 : onChangeInput(inputValue);
        }
    }), [delimiter, emails, enable, onChange, onChangeInput, onDisabled, validateEmail]);
    const onChangeInputValue = React.useCallback((value) => __awaiter(this, void 0, void 0, function* () {
        yield findEmailAddress(value);
    }), [findEmailAddress, onChangeInput]);
    const removeEmail = React.useCallback((index, isDisabled) => {
        if (isDisabled) {
            return;
        }
        const _emails = [...emails.slice(0, index), ...emails.slice(index + 1)];
        setEmails(_emails);
        onChange === null || onChange === void 0 ? void 0 : onChange(_emails);
    }, [emails, onChange]);
    const handleOnKeydown = React.useCallback((e) => {
        onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
        switch (e.key) {
            case 'Enter':
                e.preventDefault();
                break;
            case 'Backspace':
                if (!e.currentTarget.value) {
                    removeEmail(emails.length - 1, false);
                }
                break;
            default:
        }
    }, [emails.length, onKeyDown, removeEmail]);
    const handleOnKeyup = React.useCallback((e) => __awaiter(this, void 0, void 0, function* () {
        onKeyUp === null || onKeyUp === void 0 ? void 0 : onKeyUp(e);
        switch (e.key) {
            case 'Enter':
            case 'Backspace':
                yield findEmailAddress(e.currentTarget.value, true);
                break;
            default:
        }
    }), [findEmailAddress, onKeyUp]);
    const handleOnChange = React.useCallback((e) => __awaiter(this, void 0, void 0, function* () { return yield onChangeInputValue(e.currentTarget.value); }), [onChangeInputValue]);
    const handleOnBlur = React.useCallback((e) => __awaiter(this, void 0, void 0, function* () {
        setFocused(false);
        yield findEmailAddress(e.currentTarget.value, true);
        onBlur === null || onBlur === void 0 ? void 0 : onBlur();
    }), [findEmailAddress, onBlur]);
    const handleOnFocus = React.useCallback(() => {
        setFocused(true);
        onFocus === null || onFocus === void 0 ? void 0 : onFocus();
    }, [onFocus]);
    React.useEffect(() => {
        var _a;
        setEmails((_a = props.emails) !== null && _a !== void 0 ? _a : []);
    }, [props.emails]);
    return (React.createElement("div", { className: `${className} ${noClass ? '' : 'react-multi-email'} ${focused ? 'focused' : ''} ${inputValue === '' && emails.length === 0 ? 'empty' : ''}`, style: style, onClick: () => { var _a; return (_a = emailInputRef.current) === null || _a === void 0 ? void 0 : _a.focus(); } },
        spinning && (spinner === null || spinner === void 0 ? void 0 : spinner()),
        placeholder ? React.createElement("span", { "data-placeholder": true }, placeholder) : null,
        React.createElement("div", { className: 'data-labels', style: { opacity: spinning ? 0.45 : 1.0, display: 'contents', flexWrap: 'inherit' } }, emails.map((email, index) => getLabel(email, index, removeEmail))),
        React.createElement("input", { id: id, style: { opacity: spinning ? 0.45 : 1.0 }, ref: emailInputRef, type: 'text', value: inputValue, onFocus: handleOnFocus, onBlur: handleOnBlur, onChange: handleOnChange, onKeyDown: handleOnKeydown, onKeyUp: handleOnKeyup, autoFocus: autoFocus, className: inputClassName })));
}
exports.ReactMultiEmail = ReactMultiEmail;
